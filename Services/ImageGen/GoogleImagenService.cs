using System.Drawing.Imaging;
using System.Text;
using System.Text.Json;

namespace WallTrek.Services.ImageGen
{
    public class GoogleImagenService : IImageGenerationService
    {
        private readonly string apiKey;
        private readonly HttpClient httpClient;
        private const string ModelId = "models/imagen-4.0-ultra-generate-001";
        private const string BaseUrl = "https://generativelanguage.googleapis.com/v1beta";

        public GoogleImagenService(string apiKey)
        {
            this.apiKey = apiKey ?? throw new ArgumentNullException(nameof(apiKey));
            this.httpClient = new HttpClient();
        }

        public async Task<ImageGenerationResult> GenerateImage(string prompt, CancellationToken cancellationToken = default)
        {
            // Create request payload
            var requestPayload = new
            {
                instances = new[]
                {
                    new { prompt = prompt }
                },
                parameters = new
                {
                    outputMimeType = "image/jpeg",
                    sampleCount = 1,
                    personGeneration = "ALLOW_ALL",
                    aspectRatio = "16:9",
                    imageSize = "2K"
                }
            };

            var jsonContent = JsonSerializer.Serialize(requestPayload);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            // Make API request
            var url = $"{BaseUrl}/{ModelId}:predict?key={apiKey}";
            var response = await httpClient.PostAsync(url, content, cancellationToken);

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                throw new InvalidOperationException($"Google Imagen API request failed: {response.StatusCode} - {errorContent}");
            }

            var responseContent = await response.Content.ReadAsStringAsync();

            // Parse response to extract base64 image data
            using var jsonDoc = JsonDocument.Parse(responseContent);

            if (!jsonDoc.RootElement.TryGetProperty("predictions", out var predictions))
            {
                throw new InvalidOperationException("No predictions found in Google Imagen response");
            }

            if (predictions.GetArrayLength() == 0)
            {
                throw new InvalidOperationException("No images were generated by Google Imagen");
            }

            var firstPrediction = predictions[0];
            if (!firstPrediction.TryGetProperty("bytesBase64Encoded", out var base64Element))
            {
                throw new InvalidOperationException("No image data found in response");
            }

            var base64Data = base64Element.GetString();
            if (string.IsNullOrEmpty(base64Data))
            {
                throw new InvalidOperationException("Empty image data received");
            }

            // Decode base64 image data
            var imageBytes = Convert.FromBase64String(base64Data);
            var memoryStream = new MemoryStream(imageBytes);

            return new ImageGenerationResult
            {
                ImageData = memoryStream,
                Format = ImageFormat.Jpeg
            };
        }

        public void Dispose()
        {
            httpClient?.Dispose();
        }
    }
}